version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: todo_mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
    networks:
      - todo_network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  api:
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
    container_name: todo_api
    volumes:
      - ./api:/app
      - /app/node_modules
    environment:
      - MONGO_URI=mongodb://root:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/todo_db?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - todo_network
    healthcheck:
      test: ["CMD", "node", "--eval", "try { require('http').get('http://localhost:5000/api/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1)); } catch (e) { process.exit(1); }"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    container_name: todo_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost/api
    depends_on:
      api:
        condition: service_healthy
    networks:
      - todo_network
    healthcheck:
      # Pour une application Vite/React, vérifiez simplement que le processus est en cours d'exécution
      test: ["CMD-SHELL", "ps aux | grep node | grep -v grep || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
      
  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    container_name: todo_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - todo_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - todo_network
    depends_on:
      api:
        condition: service_healthy
      nginx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "promtool", "check", "config", "/etc/prometheus/prometheus.yml"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - todo_network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "/usr/share/grafana/bin/grafana-server --version || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  todo_network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local